% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ERAChordPlot.R
\name{ERAChordPlot}
\alias{ERAChordPlot}
\title{Create Chord Plots}
\usage{
ERAChordPlot(
  Chord.Data,
  Type = "Chord",
  Alpha = 0.5,
  Value.Var = "yi",
  Value.Mid = 0,
  Cont.Pallete = NA,
  Legend.Tit = "",
  Facing = "clockwise",
  Lab.Adjust = 0,
  Lab.Cex = 0.2,
  Lab.Font = 1,
  Axis.Cex = 0.3,
  Reduce = 0.01,
  Cat.Pal = NA,
  niceFacing = T,
  Show.Axis.Labels = T,
  Plot.Title = NA,
  Grid.Pal.From = RColorBrewer::brewer.pal(8, "PiYG"),
  Grid.Pal.To = RColorBrewer::brewer.pal(8, "BrBG"),
  Legend.xy.cat = NA,
  Legend.xy.chord = NA
)
}
\arguments{
\item{Chord.Data}{A \code{data.table} object output by the \code{ERAg::PrepareChordData}function}

\item{Type}{A character vector of either \code{"Chord"},\code{"Grid"} or \code{"Category"}. If \code{Type="Grid"} chords are coloured by the \code{from} objects in the plot, if \code{Type="Chord"}
chords are colored by continuous numeric field specified by \code{Value.Var}, and if \code{Type="Category"}chords are coloured by a categorical variable.}

\item{Alpha}{A numeric value between 0 and 1 indicating the transparency of chords}

\item{Value.Var}{A character vector of either \code{"yi"},\code{"vote"} or \code{"cat"}. If \code{Type="Chord"} then this argument chooses the value statistic that colours chords, \code{"yi"}
= response ratio and \code{"vote"} = vote count. If \code{Type="Category"} then this argument should be set to \code{"cat"}; a column of class \code{character} in \code{Chord.Data} containing a categorical variable.}

\item{Value.Mid}{A numeric vector of length one; choose the mid-value of the colour palette, for response ratios (\code{Value.Var=="yi"}) this is typically 0}

\item{Cont.Pallete}{A character vector of length two describing two \code{brewer.pal}palettes from\verb{rownames(RColorBrewer::brewer.pal.info)[RColorBrewer::brewer.pal.info$category=="seq"])}.
Set to \code{NA} to use default palettes}

\item{Legend.Tit}{A character vector of length one; title of the legend}

\item{Facing}{a character vector of one; adjust facing of text: c("inside", "outside", "reverse.clockwise", "clockwise","downward", "bending", "bending.inside", "bending.outside")}

\item{Lab.Adjust}{A numeric vector of length one; adjust the spacing between rotated labels and the track}

\item{Lab.Cex}{A numeric vector of length one; adjusts the size of sector labels}

\item{Lab.Font}{A interger for font style, see \link[graphics]{par}. 1 corresponds to plain text (the default), 2 to bold face, 3 to italic and 4 to bold italic.}

\item{Axis.Cex}{A numeric vector of length one; adjusts the size of track axis labels}

\item{Reduce}{A numeric vector of length one; a proportion between 0-1, chords widths below this proportion are excluded from the plot}

\item{Cat.Pal}{A character vector of length = \code{length(unique(Chord.Data$cat))}; the vector should contain colour values corresponding to the values in}

\item{niceFacing}{Logical \code{T/F}. Should the facing of text be adjusted to fit human eyes?}

\item{Show.Axis.Labels}{Logical \code{T/F}. Show axis labels?}

\item{Plot.Title}{A character vector of length one; text to display as the plot title.}

\item{Grid.Pal.From}{A character vector of colours recognized by \code{circlize::chordDiagram} that colours the \strong{from} sectors of the chord plot}

\item{Grid.Pal.To}{A character vector of colours recognized by \code{circlize::chordDiagram} that colours the \strong{to} sectors of the chord plot}

\item{Legend.xy.cat}{A numeric vector of length two; override the x and y position of the legend (units are npc)}

\item{Legend.xy.chord}{A numeric vector of length four; override the x and y position of the legend (units are npc), first two values adjust the high values and last two values the low values.
\code{Chord.Data$cat} which should form the vector names, for example  \code{Cat.Pal=setNames(c("blue", "green","Red"), c("A", "B","C"))}.}
}
\value{
Returns a \link[circlize]{chordDiagram} plot capture using \code{recordPlot()}.
}
\description{
The \code{ERAChordPlot} function plots the output of the \code{ERAg::PrepareChordData} function to visualise the relationship between ERA objects.
}
\details{
This function uses the \link[circlize]{chordDiagram} to create the chord plot and also requires the \code{ComplexHeatmap} package to generate legends.
The latter can be installed using \verb{devtools::install_github("jokergoo/ComplexHeatmap").}
}
